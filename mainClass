
public class mainClassProj {

private String[] workbook;
private int nextPos;
private int numSheets;



	public void mainClassProj(int capacity) {
		workbook = new String[capacity];
		workbook[1] = "Sheet1";
		workbook[2] = "Sheet2";
		workbook[3] = "Sheet3";
		nextPos = 4;
		numSheets = 3;
		//each name must be unique (case-insensitive)
		//at least one sheet always
		//sheet must have at least one character
		//sheets can only have A-Z, 0-9
		
	}
	
	    /*
        The 'from' element will be placed in a temporary vairable 'temp'.
        If 'from' < 'to', each element after 'from' will be shifted back one position, i.e. [from+1] will now
        be stored in index [from]. The 'from' index will then be placed in the index ['to' + 1] (if before == false)
        and ['to' - 1] (if before == true). If 'from' >  'to', each element will be shifted forward and the
        element will be placed in index 'to + 1' {if before == false) and 'to - 1' (before == true).
        */
    	
	public String move(int from, int to, boolean before) {
		String value = "";
		System.out.println("\n" + from + " -- " + to);
		if (from < nextPos && from >= 0 && to < nextPos && to >= 0) {       	// checks if 'from' and 'to' are indices of a sheet

			if (before == false) {

				if (from < to) {  // working :)
				    String temp = workbook[from];
				    for (int i = 0; i <= to - from; i++) {          	// shifts elements forward in position 
					workbook[from + i] = workbook[from+(i+1)];  	// i.e. [1] to [2], [2] to [3] and so on
				    }                                               
				    workbook[to] = temp;
				    value = temp;

				} else if (from > to) { // working :)
				    String temp = workbook[from];
				    for (int i = 0; i <= from - to; i++) {          	// shifts elements backward in position 
					workbook[from - (i)] = workbook[from-(i-1)];  	// i.e. [3] to [2], [2] to [1] and so on
				    }                                               
				    workbook[to+1] = temp;
				    value = temp;

				} else { // 'from' == 'to' gives a null statement
				    value =  null;
				}

		    	} else {

				if (from < to) { // working :)
				    String temp = workbook[from];
				    for (int i = 0;i <= to - from - 1; i++) {
					workbook[from + (i)] = workbook[from+i+1];  	// shifts elements forward in position 
				    }                                               	// i.e. [1] to [2], [2] to [3] and so on
				    workbook[to-1] = temp;
				    value = temp;

			 	} else if (from > to) { // working :)
				    String temp = workbook[from];
				    for (int i = 0; i <= from - to; i++) {          	// shifts elements backward in position 
					workbook[from - (i)] = workbook[from-i-1];  	// i.e. [3] to [2], [2] to [1] and so on
				    }                                               
				    workbook[to] = temp;
				    value = temp;

				} else {
				    value = null;
				}
			}
		} else {  		// if either of the sheets do not exist, a null statement will be returned
		value = null;
		}
		return value;
    	}
	
	public boolean add() {
		if (nextPos < workbook.length) {  //if the next position is less than the capacity of the array
			String SheetN = "Sheet" + nextPos;  //creates the name for the next sheet
			workbook[nextPos] = new String(SheetN);  //creates the new sheet
			nextPos ++;  
			numSheets ++;
			return true;
		}
		else {
			return false;
		}
		
	}
	
	public int remove(String sheetName) {
		int i, index = 0;
		if(numSheets > 1) {
			for(i = 0 ; i <= numSheets ; i++) {  //search for the sheetName
				if(workbook[i] == sheetName) {
					index = i;
					//workbook[index] = ***remove this sheetName from the array***
					numSheets --;
					break;
				}
				else {
					index = -1;
				}
			}
		}
		else {
			index = -1;
		}
		return index;
	}
	
	public String remove(int index) {
		String val;
		int i;
		if (index >= 1 && index <= numSheets) {
			val = workbook[index]; //val gets the name of the sheet at the given index
			if(index == numSheets - 1) {
				workbook[index] = ""; //not perfect
				numSheets --;
				
			}
			else {
				for(i = index ; i < numSheets ; i ++) {  //loop to move each sheet after the removed sheet back one pos
					workbook[i] = workbook[i+1];
				}
			numSheets --;	
			}
			
		}
		else {
			val = "";
		}
		return val;

	}
	
	public int index(String sheetName) {
		
		int i, index = 0;
		for(i = 0 ; i <= numSheets ; i++) {  //search for the sheetName
			if(workbook[i] == sheetName) {
				index = i;
				break;
			}
			else {
				index = -1;
			}
			
		}
		return index;
	}
	

}

