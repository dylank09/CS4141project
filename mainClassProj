import java.util.HashSet;

/**
* @author Padraig McCarthy - 18227465
* @author Dylan Kearney - 18227023
* @author Aaron Foster - 18232086
*/


public class mainClassProj {

private String[] workbook;
private int nextPos;
private int numSheets;
private int sheetNum;

private HashSet<Character> alphabet;


	public mainClassProj() {
		workbook = new String[256];
		workbook[0] = "Sheet1";
		workbook[1] = "Sheet2";
		workbook[2] = "Sheet3";
		nextPos = 3;
		numSheets = 3;
		sheetNum = 4;
		//each name must be unique (case-insensitive) - rename
		//at least one sheet always - remove
		//sheet must have at least one character - rename
		//sheets can only have A-Z, 0-9 - rename
		
		
		//create a set of characters
		alphabet = new HashSet<Character>();
		String alphabetStr = "abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWYXZ0123456789" + " ";
		for(int i = 0; i < alphabetStr.length(); i++) {
			alphabet.add(alphabetStr.charAt(i));
		}
	}
	
	/**
    	* Moves a sheet from one position to another.
    	* @param from       This is the index of the sheet to be moved.
    	* @param to         This is the index of the sheet before or after which the "from" sheet should be moved to.
    	* @param before     If true the sheet should be moved to before the "to" sheet, otherwise it should be moved to after the "to" sheet. 
   	* @return           If successful the method returns the index of the position the sheet was moved to. Otherwise it returns -1.
    	*/
	public String move(int from, int to, boolean before) {
		String temp, value;
		if (from < numSheets && from >= 0 && to < numSheets && to >= 0) {       	// checks if 'from' and 'to' are indices of a sheet
                    temp = workbook[from];
                    value = workbook[from];
                    if (before == false) {
                        if (from < to) {
                            for (int i = 0; i <= to - from; i++) {          	// shifts elements forward in position 
                                workbook[from + i] = workbook[from+(i+1)];  	// i.e. [1] to [2], [2] to [3] and so on
                            }                                               
                            workbook[to] = temp;
                        } else if (from > to) {
                            for (int i = 0; i <= from - to - 1; i++) {          	// shifts elements backward in position 
                                workbook[from - (i)] = workbook[from-(i+1)];  	// i.e. [3] to [2], [2] to [1] and so on
                            }                                               
                            workbook[to+1] = temp;
                        } else { 				// 'from' == 'to' gives a null statement
                            value =  null;
                        }
                    } else {
                        if (from < to) {
                            for (int i = 0;i <= to - from - 1; i++) {
                                workbook[from + (i)] = workbook[from+i+1];  	// shifts elements forward in position 
                            }                                               	// i.e. [1] to [2], [2] to [3] and so on
                            workbook[to-1] = temp;
                        } else if (from > to) {	
                            for (int i = 0; i <= from - to; i++) {          	// shifts elements backward in position 
                                workbook[from - (i)] = workbook[from-i-1];  	// i.e. [3] to [2], [2] to [1] and so on
                            }                                               
                            workbook[to] = temp;
                            } else {
                                value = null;
                            }
			}
		} else {  		// if either of the sheets do not exist, a null statement will be returned
                    value = null;
		}
		return value;
    	}
	
	/**
    	* Moves a sheet from one position to another.
    	* @param from This is the name of the sheet to be moved.
    	* @param to This is the name of the sheet before or after which the "from" sheet should be moved to.
    	* @param before If true the sheet should be moved to before the "to" sheet, otherwise it should be moved to after the "to" sheet. 
    	* @return If  successful the method returns the name of the "from" sheet. Otherwise it returns a null string.
    	*/
   	public int move(String from, String to, boolean before) {
        	if (index(from) >= 0 && index(to) >= 0) {		// checks if 'from' and 'to' are indices of a sheet and not -1.
            		return index(move(index(from), index(to), before));
        	} else {
            		return -1;
        	}
    	}
	
    	/**
	* Adds a sheet when called, if there is an available space.
	* @return		True if sheet added, otherwise false.
	*/
	public boolean add() {
		if (nextPos < workbook.length) {  //if the next position is less than the capacity of the array
			String SheetN = "Sheet" + (sheetNum);  //creates the name for the next sheet
			workbook[nextPos] = SheetN;  //creates the new sheet
			nextPos ++;  
			numSheets ++;
			sheetNum ++;
			return true;
		}
		else {
			return false;
		}
		
	}
	
	/**
	* Removes a sheet.
	* @param 	sheetName	Name of the sheet to be removed.	
	* @return			If remove is successful, index of sheet is returned, otherwise -1 is returned.		
	*/
	public int remove(String sheetName) {
		int i = -1;
		if (numSheets > 1) {
			i = index(sheetName);
			if (i != -1) {
				remove(i);
			}
		}
		return i;
	}
	
	/**
	* Removes a sheet.
	* @param 	index	Index of the sheet to be removed.	
	* @return		If remove is successful, the name of the sheet is returned, otherwise null is returned.		
	*/
	public String remove(int index) {
		String val = null;
		if(numSheets > 1) {
			if (index >= 0 && index < numSheets) {
				val = workbook[index]; //val gets the name of the sheet at the given index
				if (index == numSheets - 1) {
					workbook[index] = null; 
				} else {
					for(int i = index ; i < numSheets ; i ++) {  //loop to move each sheet after the removed sheet back one pos
						workbook[i] = workbook[i+1];
					}
				}
				numSheets --;
				nextPos --;
			}
		}	
		return val;
	}
	
	/**
	* Returns the index of a sheet, given its name.
	* @param 	sheetName	Name of the sheet.	
	* @return			If successful, index of sheet is returned, otherwise -1 is returned.		
	*/
	public int index(String sheetName) {
		int index = 0;
		for(int i = 0 ; i < numSheets ; i++) {  //search for the sheetName
			if (workbook[i].compareToIgnoreCase(sheetName) == 0) {  //this allows case-insensitivity 
				index = i;
				break;
			}
			else {
				index = -1;
			}
		}
		return index;
	}
	
	/**
	* Displays all existing sheets.
	*/
	public void display() {
		for(int i = 0 ; i < numSheets ; i ++) {
			System.out.printf("%3d:\t%s\n", i, workbook[i]);
		}
	}
	
	/**
	* Gives the name of a specified sheet index.
	* @param	index	The index of the sheet.
	* @return 		The name of the sheet.
	*/
	public String sheetName(int index) {
		return workbook[index];
	}
	
	/**
	* @return		The number of currently existing sheets.
	*/
	public int length() {
		return numSheets;
	}
	
	/**
	* Renames a specified sheet.
	* @param	currentName	The name of the sheet to be changed.
	* @param	newName		The new name of the sheet.
	* @return			Returns the index of the renamed sheet.
	*/
	public int rename(String currentName, String newName) {
		int index = index(currentName);
		//check newName if it has any illegal characters
		for(int i = 0 ; i < newName.length() ; i ++) {
			if (alphabet.contains(newName.charAt(i)) == false) 
				return -1;
		}
		if (index(newName) != -1) {
			index = -1;
		}
		else {
			workbook[index] = newName;
		}
		
		return index;
	}
	
	/**
 	* Used to move a sheet to the end. That is, after the last existing sheet.
	* @param   from    The index of the sheet to be moved to the end.
 	* @return          Name of sheet if successful, null string otherwise
 	*/
	public String moveToEnd(int from) {
    		return move(from, nextPos-1, false);
	}

	/**
 	* Used to move a sheet to the end. That is, after the last existing sheet.
 	* @param   from    The name of the sheet to be moved to the end.
 	* @return          Original index of sheet if successful, otherwise -1.
 	*/
	public int moveToEnd(String from) {
    		int fromInt = index(from);      	// saves index of "from" in "fromInt" before it's moved to the end.
    		if (index(from) < nextPos-1 && index(from) >= 0) {     // Test if the sheet name is an existing sheet.
        		move(fromInt, nextPos-1, false);
			return fromInt;
		} else {
        		return -1;
    		}
	}
}
