import java.util.HashSet;

/*
* @author Padraig McCarthy - 18227465
* @author Dylan Kearney - 18227023
* @author Aaron Foster - 18232086
*/


public class mainClassProj {

private String[] workbook;
private int nextPos;
private int numSheets;
private int sheetNum;

private HashSet<Character> alphabet;


	public mainClassProj(int capacity) {
		workbook = new String[capacity];
		workbook[0] = "Sheet1";
		workbook[1] = "Sheet2";
		workbook[2] = "Sheet3";
		nextPos = 3;
		numSheets = 3;
		sheetNum = 4;
		//each name must be unique (case-insensitive) - rename
		//at least one sheet always - remove
		//sheet must have at least one character - rename
		//sheets can only have A-Z, 0-9 - rename
		
		
		//create a set of characters
		alphabet = new HashSet<Character>();
		String alphabetStr = "abcdefghijklmnopqrstuvwyxzABCDEFGHIJKLMNOPQRSTUVWYXZ0123456789" + " ";
		for(int i = 0; i < alphabetStr.length(); i++) {
			alphabet.add(alphabetStr.charAt(i));
		}
	}
	
	    /*
        The 'from' element will be placed in a temporary vairable 'temp'.
        If 'from' < 'to', each element after 'from' will be shifted back one position, i.e. [from+1] will now
        be stored in index [from]. The 'from' index will then be placed in the index ['to' + 1] (if before == false)
        and ['to' - 1] (if before == true). If 'from' >  'to', each element will be shifted forward and the
        element will be placed in index 'to + 1' {if before == false) and 'to - 1' (before == true).
        */
    	
	public String move(int from, int to, boolean before) {
		String value = "";
		System.out.println("\n" + from + " -- " + to);
		if (from < nextPos && from >= 0 && to < nextPos && to >= 0) {       	// checks if 'from' and 'to' are indices of a sheet

			if (before == false) {

				if (from < to) {  // working :)
				    String temp = workbook[from];
				    for (int i = 0; i <= to - from; i++) {          	// shifts elements forward in position 
					workbook[from + i] = workbook[from+(i+1)];  	// i.e. [1] to [2], [2] to [3] and so on
				    }                                               
				    workbook[to] = temp;
				    value = temp;

				} else if (from > to) { // working :)
				    String temp = workbook[from];
				    for (int i = 0; i <= from - to; i++) {          	// shifts elements backward in position 
					workbook[from - (i)] = workbook[from-(i-1)];  	// i.e. [3] to [2], [2] to [1] and so on
				    }                                               
				    workbook[to+1] = temp;
				    value = temp;

				} else { // 'from' == 'to' gives a null statement
				    value =  null;
				}

		    	} else {

				if (from < to) { // working :)
				    String temp = workbook[from];
				    for (int i = 0;i <= to - from - 1; i++) {
					workbook[from + (i)] = workbook[from+i+1];  	// shifts elements forward in position 
				    }                                               	// i.e. [1] to [2], [2] to [3] and so on
				    workbook[to-1] = temp;
				    value = temp;

			 	} else if (from > to) { // working :)
				    String temp = workbook[from];
				    for (int i = 0; i <= from - to; i++) {          	// shifts elements backward in position 
					workbook[from - (i)] = workbook[from-i-1];  	// i.e. [3] to [2], [2] to [1] and so on
				    }                                               
				    workbook[to] = temp;
				    value = temp;

				} else {
				    value = null;
				}
			}
		} else {  		// if either of the sheets do not exist, a null statement will be returned
		value = null;
		}
		return value;
    	}
	
		/**
		 * This method will either shift each element forward or backward a number of spaces depending on whether the index 
		 * 'from' is greater than or less than the index of 'to'. The number of spaces depends on the value of the boolean before.
		 * If the index of 'from' is equal to the index of 'to', -1 will be returned
		 * @param 	from 	This is the name of the sheet you want to move.
		 * @param 	to 	This is the name of the sheet before or after which the sheet 'from' should be moved to. 
		 * @param 	before 	If true, the sheet will be moved to before the sheet 'to'. If false it will be moved after the sheet 'to'.
		 * @return		If a sheet is moved, the index of the sheet 'from' will be returned. If unsuccessful, -1 will be returned.
		 */
    public int move(String from, String to, boolean before) {
        	if (move(index(from), index(to), before) != null)		// checks if 'from' and 'to' are elements of the array
            		return index(move(index(from), index(to), before));	// uses previous move method with index method
        	else {
            		return -1;						// returns -1 if either aren't in the array
        	}
    	}
	
	public boolean add() {
		if (nextPos < workbook.length) {  //if the next position is less than the capacity of the array
			String SheetN = "Sheet" + (sheetNum);  //creates the name for the next sheet
			workbook[nextPos] = new String(SheetN);  //creates the new sheet
			nextPos ++;  
			numSheets ++;
			sheetNum ++;
			return true;
		}
		else {
			return false;
		}
		
	}
	
	public int remove(String sheetName) {
		int i = -1;
		if(numSheets > 1) {
			i = index(sheetName);
			if(i != -1) {
				remove(i);
			}
		}
		return i;
	}
	
	public String remove(int index) {
		String val = "";
		if(numSheets > 1) {
			if (index >= 0 && index <= numSheets) {
				val = workbook[index]; //val gets the name of the sheet at the given index
				if(index == numSheets - 1) {
					workbook[index] = ""; 
					numSheets --;
					nextPos --;
			}
			else {
				for(int i = index ; i < numSheets ; i ++) {  //loop to move each sheet after the removed sheet back one pos
					workbook[i] = workbook[i+1];
				}
			numSheets --;
			nextPos --;
			}	
		}
		}	
		return val;
	}
	
	public int index(String sheetName) {
		
		int index = 0;
		for(int i = 0 ; i < numSheets ; i++) {  //search for the sheetName
			if(workbook[i].compareToIgnoreCase(sheetName) == 0) {  //this allows case-insensitivity 
				index = i;
				break;
			}
			else {
				index = -1;
			}
			
		}
		return index;
	}
	
	public void Display() {
		for(int i = 0 ; i < numSheets ; i ++) {
			System.out.println(workbook[i]);
		}
	}
	
	public String sheetName(int index) {
		return workbook[index];
	}
	
	public int length() {
		return numSheets;
	}
	
	public int rename(String currentName, String newName) {
		int index = index(currentName);
		//check newName if it has any illegal characters
		for(int i = 0 ; i < newName.length() ; i ++) {
			if (alphabet.contains(newName.charAt(i)) == false) 
				return -1;
		}
		if (index(newName) != -1) {
			index = -1;
		}
		else {
			workbook[index] = newName;
		}
		
		return index;
	}
	
	/**
 	* Used to move a sheet to the end. That is, after the last existing sheet.
	* @param   from    The index of the sheet to be moved to the end.
 	* @return          Name of sheet if successful, null string otherwise
 	*/
	public String moveToEnd(int from) {
    	return move(from, nextPos-1, false);
	}

	/**
 	* Used to move a sheet to the end. That is, after the last existing sheet.
 	* @param   from    The name of the sheet to be moved to the end.
 	* @return          Index of sheet if successful, otherwise -1.
 	*/
	public int moveToEnd(String from) {
    	int fromInt = index(from);      	// saves index of "from" in "fromInt" before it's moved to the end.
    	if (index(move(fromInt, nextPos-1, false)) != -1) {     // Test if the sheet name is an existing sheet.
        		return fromInt;
    	} else {
        		return -1;
    	}
    
	}
	
}
